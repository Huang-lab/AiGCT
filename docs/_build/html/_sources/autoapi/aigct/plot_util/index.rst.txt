aigct.plot_util
===============

.. py:module:: aigct.plot_util


Functions
---------

.. autoapisummary::

   aigct.plot_util.barchart
   aigct.plot_util.create_feature_palette
   aigct.plot_util.get_colors
   aigct.plot_util.heatmap


Module Contents
---------------

.. py:function:: barchart(df: pandas.DataFrame, x: str, y: str, x_label: str = '', y_label: str = '', ci: pandas.DataFrame = None, filename: str = None, hatch: str = None, edgecolor=None, palette=None, errorbar=None, estimator: str = 'mean', title: str = '', title_fontsize: int = 20, y_label_fontsize: int = 15, x_label_fontsize: int = 15, y_tick_label_size: int = 15, x_tick_label_size: int = 15, xtick_rotation: int = None, xtick_rotation_mode: str = None, file_dpi: int = 300, bbox_inches: str = 'tight')

.. py:function:: create_feature_palette(values: list) -> dict

.. py:function:: get_colors(num_colors: int) -> list

.. py:function:: heatmap(df: pandas.DataFrame, y_column: str = None, x_column: str = None, value_column: str = None, x_label: str = '', y_label: str = '', title: str = '', cmap: str = 'viridis', annot: bool = True, fmt: str = '.2f', linewidths: float = 0.5, title_fontsize: int = 20, label_fontsize: int = 15, tick_fontsize: int = 12, annot_fontsize: int = 10, figsize: tuple = (10, 8), filename: str = None, vmin: float = None, vmax: float = None, cbar: bool = True, cbar_kws: dict = None, square: bool = False, mask: pandas.DataFrame = None, file_dpi: int = 300, bbox_inches: str = 'tight')

   Plot a heatmap using seaborn.

   Parameters
   ----------
   df : pd.DataFrame
       DataFrame to plot as heatmap
   y_column : str, optional
       Column to use for y-axis categories. If provided along with x_column
       and value_column, the function will pivot the data before plotting.
   x_column : str, optional
       Column to use for x-axis categories. If provided along with y_column
       and value_column, the function will pivot the data before plotting.
   value_column : str, optional
       Column containing values to plot. If provided along with x_column and
       y_column, the function will pivot the data before plotting.
   x_label : str, optional
       Label for x-axis
   y_label : str, optional
       Label for y-axis
   title : str, optional
       Title of the plot
   cmap : str, optional
       Colormap to use
   annot : bool, optional
       Whether to annotate cells with values
   fmt : str, optional
       Format string for annotations
   linewidths : float, optional
       Width of lines between cells
   title_fontsize : int, optional
       Font size for title
   label_fontsize : int, optional
       Font size for axis labels
   tick_fontsize : int, optional
       Font size for tick labels
   annot_fontsize : int, optional
       Font size for annotations
   figsize : tuple, optional
       Figure size (width, height) in inches
   filename : str, optional
       If provided, save figure to this file
   vmin : float, optional
       Minimum value for colormap scaling
   vmax : float, optional
       Maximum value for colormap scaling
   cbar : bool, optional
       Whether to draw a colorbar
   cbar_kws : dict, optional
       Additional arguments for colorbar
   square : bool, optional
       Whether to make cells square-shaped
   mask : pd.DataFrame, optional
       Boolean DataFrame of same shape as df, True values will not be plotted
   file_dpi : int, optional
       DPI for saved figure
   bbox_inches : str, optional
       Bounding box in inches for saved figure
       
   Returns
   -------
   matplotlib.axes.Axes
       The matplotlib axes containing the plot


